from sage.misc.verbose import set_verbose
from Crypto.Util.number import long_to_bytes
data = {
  "n": 89264537443646707835191598506949023042315510029324894079699803678074205395779119013430569937188497201387306276425980420944658155159342408045180592795750869581096573510443642632511844104603781918531652001841691035895685937342449876751754198004509057356638869713809396074677294156416786732938570849510466650791,
  "e": 65537,
  "c": 88191441619257809786801227656045312783614662545311694917113151420119966169613537316600590591873921515348360354896417654993817786805776750624930708280372283128582252115918244033447550470830150658171662047284663779435547325879572094883769299423043163286899652485460321561502521576359847097528972041519012723318,
  "h": 8443761804846892496314376873898529340899560704545788819509434118281364076154274274100129936574975470211586552330754910514210896950284423094851051953586176
}


set_verbose(2)
n = data["n"]
e = data["e"]
c = data["c"]
h = data["h"]

P.<x> = PolynomialRing(Zmod(n), implementation='NTL')
f = h + x
roots = f.small_roots(X=2^128, beta=0.3)
print(roots)
if len(roots) == 0:
    print("No roots found")
    exit(1)

p = int(roots[0]) + h
q = n // p
phi = (p - 1) * (q - 1)
d = pow(e, -1, phi)
m = pow(c, d, n)
print(long_to_bytes(m))